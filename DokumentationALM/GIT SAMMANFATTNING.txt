*****************************************
GETTING STARTED:
*****************************************
1. SETTING UP A REPOSITORY:
	1.1 TVÅ SÄTT:
		- git init
		- git clone
	1.2 KONCEPT SOM NÄMNDES:
		- git add
		- git commit
		- git push
		- git remote

2. SAVING CHANGES:
	***********************
	GIT ADD:
	***********************
	COMMANDS:
		- git add:
			Första steget i att spara ändringar
		- git status
			Används för att se vad the current state of the repository
			Kan konfirmera en git add promotion
		- git reset
			Ogör en git add
		- git commit
			Commitar en snapshot av the staging directory till repositories commit history
	STEG:
		- Working Directory (där jag jobbar)
		- Staging Directory (mellan steget (WD och SLUTRESULTAT)
		- Repositories commit history

	***********************
	GIT COMMIT:
	***********************

	***********************
	GIT DIFF:
	***********************
	COMMANDS:
		- git diff
		- git log
		- git checkout

	***********************
	GIT STASH:
	***********************
	COMMANDS:
		- git stash
		- git stash pop
		- git stash apply
		- git stash -u (också det som är untracked)
		- git stash -a / --all (också det som är untracked + ignored)
		- git stash list
		- git stash save "message"
		- git stash show (view summary of stashes)
		- git stash branch (skapar ny branch med stashen)
		- git stash clear (rensar alla stashes)
		- git stash drop @stash (specifik stash rensning)

	***********************
	.GITIGNORE:
	***********************
	FILES:
		1. Tracked (staged elr commited)
		2. Untracked
		3. Ignored (git har explicit blivit tillsagd att ignorera)

3. INSPECTING A REPOSITORY:
	***********************
	git status
	***********************
		- Inspect the working directoruy och staged area (jämför git log)
		- Vad är unstaged, staged och untracked

		1. UNTRACKED FILES:
			- TVÅ UPPDELNINGAR:
				- Har inte blivit committed
				- Compiled binaries....(????)

		2. KOLLA ALLTID STATUS INNAN DU COMMITAR

	***********************
	git log
	***********************
		Only operates on the committed history (jämför git status)
		CheckSum = Unik identifiering av commit
		HEAD refererar alltid till den Current commit
		~ (tilda) refererar till parent av commiten (den commit som var innan)
		HEAD~3 (tredje commit bakåt från Current commit)

		COMMANDS:
			- git log -n 3 		   (Loggar 3 st commits)
			- git log --oneline 	   (bra för overview (varje commit som en line))
			- git log -p 		   (visar det mest möjligt detaljerade av ens project history)
			- git log <since>..<until> (visar inom ett span av commits)

		JÄMFÖRA 2 BRANCHER:
			git log --oneline master..some-feature

	***********************
	git tag
	***********************
		- Fångar ett moment in the project history
		- Annotated tags (best practice, jämför med lightweight)
		- Lightweight tags

		COMMANDS:
			- git tag (listar alla tags i repositoryt)

	***********************
	git blame
	***********************
		- Man kan undersöka projektet och se vem som har modifierat en line (lite lig git log, men har olikheter)

4. REWRITING HISTORY
	***********************
	git checkout
	***********************
		- Om man valt ut vilken commit man vill gå bakåt till och inspektera kan man använda git checkout för att få ner det momentet på sin dator
		- DETATCHED HEAD = När man inte pekar på en branch utan pekar på en commit bakåt (på en fil bakåt i historien)

				- GARBAGE COLLECTOR + ORPHANED COMMITS
				När man är på ett dettched head (kollar en specifik commit är man inte längre på ngn branch. 
				Alla commit man gör vid detached head = orphaned commits (kan tas ut av garbage collector)

				EFTER (För att skapa ny branch för att kunna gå bakåt till gamla commiten)
				git checkout -b new_branch_without_crazy_commit.
				Man måste därför confirmera att man är på en branch när man gör commit
				Garbage collector rensar regelbundet
		

	1. Centralized workflow
		- Bra för små team

	2. Feature branching:
		- Fokuserar på branchmönster (andra är mer reposotoryorienterade)
		- Master branch har aldrig broken code
		- Alla har egen branch
		- Utbyggnad av Centralize
		- Bygger på pull request (??)

	3. Git flow
		- Bra för release-flow software workflow
		- Assignar specifika uppgifter för resp branch och definerar när och hur de ska interagera
		- Bra för större projekt
		- Använder också grunden från Feature branching (pull, isolated experim)
		- Finns ett gitflow-toolset
		- Har två branches för att record history:
			- MASTER BRANCH
				- Features ska aldrig interagera direkt till master
			- DEVELOP BRANCH
				- Features interagerar med develop
			(en ofiiciell relese och en som har intergrerade develop brancher)
		- Vid release så tar man develop o lägger in i release cycle (då kan inget nytt komma in i den cycle) för att få in i master

		- BRANCHES:
			1. RELEASE BRANCHES:
				- Baserade på develop branchen
				- Tar bort den efter release
			2. FEATURE BRANCHES:
				- Också baserade på develop branchen
			3. MAINTAINANCE/HOTFIX BRANCHES:
				- Baserade på master (inte develop branchen)


		SAMMANFATTNING GITFLOW:
			1. A develop branch is created from master
			2. A release branch is created from develop
			3. Feature branches are created from develop
			4. When a feature is complete it is merged into the develop branch
			5. When the release branch is done it is merged into develop and master
			6. If an issue in master is detected a hotfix branch is created from master
			7. Once the hotfix is complete it is merged to both develop and master
				- Bra för att fixa buggar på(???) Måste inte vänta på releasetid
		
		

	4. Forkflow:
		- Varje utvecklare får en egen server-side-repository
			2 REPOSITORIES PER UTVECKLARE:
				- 1 private local repository
				- 1 public server-side-repository
		- Oftast i public open source projects
		- FÖRDEL:
			- Bara en person får access till official repo
